Filename: 20240214T23.09.13Z-Fat-Cat-Chat-128k
Generated on: 2024-02-14 17:09:13
Total Characters: 10801


--- public\index.html ---


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>





--- public\robots.txt ---


# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:





--- src\App.js ---


// src\App.js
import React from 'react';
import styles from './App.module.css';
import ChatComponent from './ChatComponent';

function App() {
  return (
    <div className={styles.App}>
      <header className={styles.AppHeader}>
        <h1>OpenAI Chat 'gpt-4-0125-preview' 128k Tokens</h1>
        <ChatComponent />
      </header>
    </div>
  );
}

export default App;




--- src\App.module.css ---


/* src/App.module.css */

.App-header {
  /* styles for the header */
}

ul {
  list-style: none;
  padding: 0;
}

li {
  margin: 5px 0;
}

li.user {
  color: blue;
}

li.assistant {
  color: green;
}

form {
  display: flex;
}

input,
textarea {
  flex-grow: 1;
  padding: 10px;
  margin-right: 5px;
}

.button-container button {
  padding: 10px;
  margin-right: 20px; /* 20px space between buttons */
}

.button-container button:last-child {
  margin-right: 0; /* No space after the last button */
}




--- src\App.test.js ---


import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});





--- src\aws-exports.js ---


const awsmobile = {
    aws_project_region: 'us-east-2',
    aws_cognito_identity_pool_id: 'us-east-2:486708928239',
    aws_cognito_region: 'us-east-2',
    aws_user_pools_id: 'us-east-2_0vlNeBEx2',
    aws_user_pools_web_client_id: '45j8c0avi4s74puc19hbuh5anh',
    oauth: {
        domain: 'chatgpt4-128k.auth.us-east-2.amazoncognito.com',
        scope: ['email', 'openid', 'profile', 'aws.cognito.signin.user.admin'],
        redirectSignIn: 'https://master.d2p0e8psp9klk1.amplifyapp.com',
        redirectSignOut: 'https://master.d2p0e8psp9klk1.amplifyapp.com',
        responseType: 'code'
    },
    federationTarget: 'COGNITO_USER_POOLS',
};

export default awsmobile;





--- src\ChatComponent.js ---


// src/ChatComponent.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import ControlButtons from './ControlButtons';
import styles from './App.module.css';

const openai = axios.create({
  baseURL: 'https://api.openai.com/v1/',
  headers: {
    'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`
  }
});

const ChatComponent = () => {
  const [inputValue, setInputValue] = useState('');
  const [messages, setMessages] = useState([]);
  const [timer, setTimer] = useState(0);
  const [isTiming, setIsTiming] = useState(false);
  const [responseTime, setResponseTime] = useState(null);

  useEffect(() => {
    let interval;
    if (isTiming) {
      interval = setInterval(() => {
        setTimer(prev => prev + 1);
      }, 1000);
    } else {
      clearInterval(interval);
      setTimer(0); // Reset timer
    }

    return () => clearInterval(interval);
  }, [isTiming]);

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && e.shiftKey) {
      e.preventDefault(); // Prevent default to avoid a new line being created by the textarea
      sendMessage(); // Call the send message function
    }
  };

  const sendMessage = async () => {
    setIsTiming(false); // Stop the timer if it was running
    setResponseTime(null); // Reset response time for new message
    const userMessage = inputValue;
    if (!userMessage.trim()) return;

    const updatedMessages = [...messages, { role: 'user', content: userMessage }];
    setMessages(updatedMessages);
    setInputValue('');
    setIsTiming(true); // Start timing

    try {
      const startTime = Date.now();
      const response = await openai.post('chat/completions', {
        model: 'gpt-4-0125-preview',
        messages: updatedMessages.map(msg => ({ role: msg.role, content: msg.content })),
      });
      const endTime = Date.now();
      const duration = (endTime - startTime) / 1000; // Calculate duration in seconds

      setResponseTime(duration); // Set response time
      setIsTiming(false); // Stop timing

      const assistantMessage = response.data.choices[0].message.content;
      if (assistantMessage) {
        setMessages(msgs => [...msgs, { role: 'assistant', content: assistantMessage }]);
      }
    } catch (error) {
      console.error("Error fetching chat completion:", error);
      setIsTiming(false); // Stop timing if there's an error
    }
  };

  const copyLastResponse = () => {
    const lastMessage = messages.find(msg => msg.role === 'assistant');
    if (lastMessage && navigator.clipboard) {
      navigator.clipboard.writeText(lastMessage.content);
    }
  };

  const clearConversation = () => {
    setMessages([]);
    setTimer(0); // Reset timer
    setIsTiming(false); // Ensure timing is stopped
    setResponseTime(null); // Reset response time
  };

  return (
    <div className={styles.chatComponent}>
      <ul className={styles.messageList}>
        {messages.map((msg, index) => (
          <li key={index} className={msg.role === 'user' ? styles.user : styles.assistant}>
            {msg.content}
          </li>
        ))}
      </ul>
      {isTiming && <p className={styles.timer}>Timing: {timer} seconds</p>}
      {responseTime !== null && <p className={styles.responseTime}>Response Time: {responseTime} seconds</p>}
      <form className={styles.messageForm} onSubmit={(e) => e.preventDefault()}>
        <textarea
          className={styles.messageInput}
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder="Type your message here and press SHIFT+ENTER to send..."
          autoFocus
          rows={3}
        />
        <button type="button" className={styles.sendButton} onClick={sendMessage}>Send</button>
      </form>
      <ControlButtons copyLastResponse={copyLastResponse} clearConversation={clearConversation} />
    </div>
  );
};

export default ChatComponent;





--- src\ControlButtons.js ---


// src/ControlButtons.js

import React from 'react';
import styles from './App.module.css';

const ControlButtons = ({ copyLastResponse, clearConversation }) => (
  <div className="button-container">
    <button onClick={copyLastResponse}>Copy</button>
    <button onClick={clearConversation}>Clear Conversation</button>
  </div>
);

export default ControlButtons;




--- src\index.css ---


body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}





--- src\index.js ---


import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import Amplify from 'aws-amplify';
import awsExports from './aws-exports'; // Ensure this path matches where your aws-exports.js file is located

// Configure Amplify with your AWS exports
Amplify.configure(awsExports);

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();





--- src\MessageInput.js ---


// src\MessageInput.js
import React from 'react';

const MessageInput = ({ inputValue, setInputValue, handleKeyDown }) => (
  <textarea
    value={inputValue}
    onChange={(e) => setInputValue(e.target.value)}
    onKeyDown={handleKeyDown}
    placeholder="Type your message here and press SHIFT+ENTER to send..."
    autoFocus
    rows={3}
  />
);

export default MessageInput;




--- src\MessagesList.js ---


// src\MessagesList.js
import React from 'react';

const MessagesList = ({ messages }) => (
  <ul>
    {messages.map((msg, index) => (
      <li key={index} className={msg.role}>
        {msg.content}
      </li>
    ))}
  </ul>
);

export default MessagesList;




--- src\reportWebVitals.js ---


const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;





--- src\setupTests.js ---


// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';





--- 20240214T162934_tree.txt ---


Fat-Cat-Chat-128k
+--- build
+--- node_modules
+--- public
|   +--- favicon.ico
|   +--- index.html
|   +--- manifest.json
|   +--- robots.txt
+--- src
    \--- App.js
    \--- App.module.css
    \--- App.test.js
    \--- aws-exports.js
    \--- ChatComponent.js
    \--- ControlButtons.js
    \--- index.css
    \--- index.js
    \--- logo.svg
    \--- MessageInput.js
    \--- MessagesList.js
    \--- setupTests.js
+--- .env
+--- .gitignore
+--- all_files.txt
+--- package-lock.json
+--- package.json




